Strict

#GLFW_WINDOW_TITLE="Vortex2 Angel"
#GLFW_WINDOW_WIDTH=800
#GLFW_WINDOW_HEIGHT=600
#GLFW_WINDOW_RESIZABLE=True
#GLFW_WINDOW_SAMPLES=2
#OPENGL_DEPTH_BUFFER_ENABLED=True
#BINARY_FILES+="*.msh|*.skl|*.anm|*.fnt"
'#GLFW_GCC_MSIZE_WINNT="32"

#If TARGET="glfw" And HOST<>"linux"
Import brl.requesters
#Endif
Import mojo.app
Import mojo.input
Import vortex

Class TestApp Extends App Final
Public
	Method OnCreate:Int()
		'Setup
		SetUpdateRate(0)
		SetSwapInterval(0)
		Seed = Millisecs()
	
		'Init vortex
		If Not Vortex.Init()
#If TARGET="glfw" And HOST<>"linux"
			Notify "Error", Vortex.ShaderError(), True
#Else
			Print "Error: " + Vortex.ShaderError()
#Endif
			EndApp()
		End
		Print "Vendor name: " + Vortex.VendorName()
		Print "Renderer name: " + Vortex.RendererName()
		Print "API version name: " + Vortex.APIVersionName()
		Print "Shading version name: " + Vortex.ShadingVersionName()
		Print "Shader compilation: " + Vortex.ShaderError()
		
		'Load font
		mFont = Font.Load("system.fnt")
		
		'Create matrices
		mProj = Mat4.Create()
		mView = Mat4.Create()
		mModel = Mat4.Create()
		mModel.SetTransform(0, 0, 0, 0, 180, 0, 1, 1, 1)
		
		'Create RenderList
		mRenderList = RenderList.Create()
		
		'Load level
		mLevel = Mesh.Load("angel.msh")
		mRenderList.AddMesh(mLevel, mModel)
		
		'Prepare lights
		Lighting.SetLightEnabled(0, True)
		Lighting.SetLightEnabled(1, True)
		Lighting.SetLightEnabled(2, True)
		Lighting.SetLightEnabled(3, True)
		Lighting.SetLightEnabled(4, True)
		Lighting.SetLightType(0, Lighting.DIRECTIONAL)
		Lighting.SetLightType(1, Lighting.POINT)
		Lighting.SetLightType(2, Lighting.POINT)
		Lighting.SetLightType(3, Lighting.POINT)
		Lighting.SetLightType(4, Lighting.POINT)
		Lighting.SetLightPosition(0, 1, 1, -1)
		Lighting.SetLightPosition(1, 0, 0, -2)
		Lighting.SetLightPosition(2, 2, 0, 0)
		Lighting.SetLightPosition(3, 0, 0, 2)
		Lighting.SetLightPosition(4, -2, 0, 0)
		Lighting.SetLightColor(0, 0.6, 0.6, 0.6)
		Lighting.SetLightColor(1, 0.5, 1, 0.7)
		Lighting.SetLightColor(2, 1, 0.7, 0.2)
		Lighting.SetLightColor(3, 1, 0.5, 0.7)
		Lighting.SetLightColor(4, 0.2, 0.7, 1)
		
		Return False
	End
	
	Method OnUpdate:Int()	
		'End with escape key
		#If TARGET<>"html5"
		If KeyHit(KEY_ESCAPE) Then EndApp()
		#End
		
		'Update delta time
		Stats.UpdateDeltaTime()
		
		'Update lighting
		mValue += Stats.DeltaTime()
		Local sinVal:Float = 0.5 + Abs(Sinr(mValue)) * 0.5
		Local cosVal:Float = 0.5 + Abs(Cosr(mValue)) * 0.5
		Lighting.SetLightRadius(1, 2 * sinVal)
		Lighting.SetLightRadius(2, 2 * cosVal)
		Lighting.SetLightRadius(3, 2 * cosVal)
		Lighting.SetLightRadius(4, 2 * sinVal)
		
		Return False
	End
	
	Method OnRender:Int()
		'Update FPS
		Stats.UpdateFPS()
		
		mProj.SetPerspectiveLH(45, Float(DeviceWidth()) / DeviceHeight(), 1, 10000)
		
		mView.LookAtLH(7, 7, -7, 0, 0, 0, 0, 1, 0)
		
		mModel.SetTransform(0, 0, 0, 0, 180 + mValue * 14.3239, 0, 1, 1, 1)
		
		Renderer.Setup3D(0, 0, DeviceWidth(), DeviceHeight())
		Renderer.SetProjectionMatrix(mProj)
		Renderer.SetViewMatrix(mView)
		Renderer.SetModelMatrix(mModel)
		Lighting.Prepare(0.3, 0.3, 0.3, True)
		Renderer.ClearColorBuffer(0.05, 0.05, 0.05)
		Renderer.ClearDepthBuffer()
		mNumRenderCalls = mRenderList.Render()
		
		'Setup renderer for 2D graphics
		Renderer.Setup2D(0, 0, DeviceWidth(), DeviceHeight())
		
		'Draw
		Local text:String = "Frank by misterdevious is licensed under CC Attribution-NonCommercial-ShareAlike"
		Renderer.SetColor(0.95, 0.95, 0.95)
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text)) / 2, 8, text)
	
		Return False
	End
Private
	Field mNumRenderCalls	: Int
	Field mFont				: Font
	
	Field mProj				: Mat4
	Field mView				: Mat4
	Field mModel			: Mat4
	Field mLevel			: Mesh
	Field mRenderList		: RenderList
	Field mValue			: Float
End

Function Main:Int()
	New TestApp()
	Return False
End
