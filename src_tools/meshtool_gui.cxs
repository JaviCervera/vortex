Strict

Private
Import brl.filepath
Import dialog
Import guifuncs
Import mesh
Import mojo.app
Import mojo.input

Public
Class Gui Final
Public
	Method New()
		'Load resources
		mFont = Font.Load("system.fnt.dat")
		mCubeTex = Texture.Load("cube.png", Renderer.FILTER_NONE)
		mOpenTex = Texture.Load("folder.png", Renderer.FILTER_NONE)
		mSaveTex = Texture.Load("disk.png", Renderer.FILTER_NONE)
		mCube = Mesh.CreateCube()
	
		mPanelRect = New Rect(8, 8, 64, 24)
		mCubeRect = New Rect(8 + 4, 8 + 4, 16, 16)
		mOpenRect = New Rect(8 + 24, 8 + 4, 16, 16)
		mSaveRect = New Rect(8 + 44, 8 + 4, 16, 16)
		
		mAnimationsRect = New Rect(76, 8, 150, 24)
		
		mPitchRect = New Rect(230, 8, 96, 24)
		mYawRect = New Rect(330, 8, 96, 24)
		mRollRect = New Rect(430, 8, 96, 24)
		
		mMaterialRect = New Rect(0, 8, 108, 748)
		mSelMatRect = New Rect(4, 4, 100, 24)
		mDiffuseColorRect = New Rect(4, 32, 100, 24)
		mDiffuseTexRect = New Rect(4, 60, 100, 100)
		mNormalTexRect = New Rect(4, 164, 100, 100)
		mSpecularTexRect = New Rect(4, 268, 100, 100)
		mLightmapRect = New Rect(4, 372, 100, 100)
		mCubemapRect = New Rect(4, 476, 100, 100)
		mRefractionCoefRect = New Rect(4, 580, 100, 24)
		mOpacityRect = New Rect(4, 608, 100, 24)
		mShininessRect = New Rect(4, 636, 100, 24)
		mBlendModeRect = New Rect(4, 664, 100, 24)
		mCullingRect = New Rect(4, 692, 100, 24)
		mDepthWriteRect = New Rect(4, 720, 100, 24)
		
		mExportAnimations = True
		mPitchFix = 0
		mYawFix = 0
		mRollFix = 0
	End
	
	Method Update:Model(currentModel:Model)
		'Update material rect
		mMaterialRect.x = DeviceWidth() - 112
		
		'Update GUI controls
		If MouseHit(MOUSE_LEFT) And currentModel
			'Save mesh
			If mSaveRect.IsPointInside(MouseX(), MouseY())
				Local filename:String = currentModel.Mesh.Filename
				If filename = ""
					filename = RequestFile("Save mesh", "Mesh Files:msh.dat;All Files:*", True)
					If filename <> "" Then currentModel.Mesh.Filename = filename
				End
				'If filename <> "" Then SaveMeshXML(currentMesh, filename, mExportAnimations)
				If filename <> ""
					'Save mesh
					SaveMesh(currentModel.Mesh, StripExt(StripExt(filename)) + ".msh.dat", mExportAnimations And currentModel.Mesh.NumBones > 0)
					
					'Save skeleton and animations
					If mExportAnimations And currentModel.Mesh.NumBones > 0
						SaveSkeleton(currentModel.Mesh, StripExt(StripExt(filename)) + ".skl.dat")
						SaveAnimation(currentModel.Mesh, StripExt(StripExt(filename)) + ".anm.dat")
					End
					
					Notify("Info", "Mesh saved as '" + StripExt(StripExt(filename)) + ".msh.dat'")
				End
			'Export animations
			Elseif currentModel.Mesh.NumBones > 0 And mAnimationsRect.IsPointInside(MouseX(), MouseY())
				mExportAnimations = Not mExportAnimations
			#Rem
			'Pitch
			Elseif mPitchRect.IsPointInside(MouseX(), MouseY())
				mPitchFix = (mPitchFix + 90) Mod 360
				RotateMesh(currentMesh, 90, 0, 0)
			'Yaw
			Elseif mYawRect.IsPointInside(MouseX(), MouseY())
				mYawFix = (mYawFix + 90) Mod 360
				RotateMesh(currentMesh, 0, 90, 0)
			'Roll
			Elseif mRollRect.IsPointInside(MouseX(), MouseY())
				mRollFix = (mRollFix + 90) Mod 360
				RotateMesh(currentMesh, 0, 0, 90)
			#End
			'Material
			Elseif mSelMatRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				mSelMat += 1
				If mSelMat = currentModel.NumMaterials Then mSelMat = 0
			'Diffuse color
			Elseif mDiffuseColorRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				If RequestColor("Select color", Color.Red(currentModel.Material(mSelMat).Color), Color.Green(currentModel.Material(mSelMat).Color), Color.Blue(currentModel.Material(mSelMat).Color))
					currentModel.Material(mSelMat).Color = Color.RGB(RequestedRed(), RequestedGreen(), RequestedBlue(), Color.Alpha(currentModel.Material(mSelMat).Color))
				End
			'Diffuse texture
			Elseif mDiffuseTexRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local filename:String = RequestFile("Select color texture")
				If filename <> ""
					Local tex:Texture = Texture.Load(filename)
					If tex Then currentModel.Material(mSelMat).ColorTexture = tex
				Else
					currentModel.Material(mSelMat).ColorTexture = Null
				End
			'Normal texture
			Elseif mNormalTexRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local filename:String = RequestFile("Select normal texture")
				If filename <> ""
					Local tex:Texture = Texture.Load(filename)
					If tex Then currentModel.Material(mSelMat).NormalTexture = tex
				Else
					currentModel.Material(mSelMat).NormalTexture = Null
				End
			'Specular texture
			Elseif mSpecularTexRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local filename:String = RequestFile("Select specular texture")
				If filename <> ""
					Local tex:Texture = Texture.Load(filename)
					If tex Then currentModel.Material(mSelMat).SpecularTexture = tex
				Else
					currentModel.Material(mSelMat).SpecularTexture = Null
				End
			'Lightmap
			Elseif mLightmapRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local filename:String = RequestFile("Select light texture")
				If filename <> ""
					Local tex:Texture = Texture.Load(filename)
					If tex Then currentModel.Material(mSelMat).LightTexture = tex
				Else
					currentModel.Material(mSelMat).LightTexture = Null
				End
			'Cubemap
			Elseif mCubemapRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local leftTex:String = RequestFile("Select left cubemap face")
				If leftTex = ""
					currentModel.Material(mSelMat).CubeTexture = Null
				Else
					Local rightTex:String = RequestFile("Select right cubemap face")
					If rightTex = ""
						currentModel.Material(mSelMat).CubeTexture = Null
					Else
						Local frontTex:String = RequestFile("Select front cubemap face")
						If frontTex = ""
							currentModel.Material(mSelMat).CubeTexture = Null
						Else
							Local backTex:String = RequestFile("Select back cubemap face")
							If backTex = ""
								currentModel.Material(mSelMat).CubeTexture = Null
							Else
								Local topTex:String = RequestFile("Select top cubemap face")
								If topTex = ""
									currentModel.Material(mSelMat).CubeTexture = Null
								Else
									Local bottomTex:String = RequestFile("Select bottom cubemap face")
									If bottomTex = ""
										currentModel.Material(mSelMat).CubeTexture = Null
									Else
										Local tex:Texture = Texture.Load(leftTex, rightTex, frontTex, backTex, topTex, bottomTex)
										If tex Then currentModel.Material(mSelMat).CubeTexture = tex
									End
								End
							End
						End
					End
				End
			'Refraction coef
			Elseif mRefractionCoefRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local coef:String = RequestInput("Enter refraction coefficient", "Positive for refractive, -1 for reflective", currentModel.Material(mSelMat).RefractionCoef)
				If coef <> "" Then currentModel.Material(mSelMat).RefractionCoef = Float(coef)
				'Local iCoef:Int = Int(currentModel.Material(mSelMat).RefractionCoef * 100)
				'iCoef += 10
				'If iCoef > 100 Then iCoef = 0
				'currentModel.Material(mSelMat).RefractionCoef = iCoef / 100.0
			'Opacity
			Elseif mOpacityRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local alpha:Int = Color.Alpha(currentModel.Material(mSelMat).Color)
				If alpha = 255
					alpha = 0
				Else
					alpha += 25
					If alpha > 255 Then alpha = 255
				End
				Local color:Int = currentModel.Material(mSelMat).Color
				currentModel.Material(mSelMat).Color = Color.RGB(Color.Red(color), Color.Green(color), Color.Blue(color), alpha)
			'Shininess
			Elseif mShininessRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				Local iShininess:Int = Int(currentModel.Material(mSelMat).Shininess * 100)
				iShininess += 10
				If iShininess > 100 Then iShininess = 0
				currentModel.Material(mSelMat).Shininess = iShininess / 100.0
			'Blend
			Elseif mBlendModeRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				currentModel.Material(mSelMat).BlendMode += 1
				If currentModel.Material(mSelMat).BlendMode > Renderer.BLEND_MUL Then currentModel.Material(mSelMat).BlendMode = 0
			'Culling
			Elseif mCullingRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				currentModel.Material(mSelMat).Culling = Not currentModel.Material(mSelMat).Culling
			'Depth write
			Elseif mDepthWriteRect.IsPointInside(MouseX() - mMaterialRect.x, MouseY() - mMaterialRect.y)
				currentModel.Material(mSelMat).DepthWrite = Not currentModel.Material(mSelMat).DepthWrite
			End
			
			'Set the original mesh material, because that's used by the exporter
			currentModel.Mesh.Material(mSelMat).Set(currentModel.Material(mSelMat))
		End
		
		'This events can be responded even if there is no loaded mesh
		If MouseHit(MOUSE_LEFT)
			'Create cube
			If mCubeRect.IsPointInside(MouseX(), MouseY())
				ResetProperties()
				Return New Model(mCube)
			'Load mesh
			Elseif mOpenRect.IsPointInside(MouseX(), MouseY())
				Local filename:String = RequestFile("Load mesh")', "Mesh Files:msh.dat;All Files:*", False)
				If filename <> ""
					filename = filename.Replace("\", "/")
					Local mesh:Mesh = LoadMesh(filename)
					If mesh <> Null
						ResetProperties()
						Return New Model(mesh)
					Else
						Notify "Error", "Could not load mesh '" + filename + "'", True
					End
				End
			End
		End
		
		Return Null
	End
	
	Method Render:Void(currentModel:Model)
		Renderer.Setup2D(0, 0, DeviceWidth(), DeviceHeight())
		Renderer.BlendMode(Renderer.BLEND_ALPHA)
		DrawPanel(mPanelRect)
		Renderer.Color(Color.WHITE)
		mCubeTex.Draw(mCubeRect.x, mCubeRect.y)
		mOpenTex.Draw(mOpenRect.x, mOpenRect.y)
		mSaveTex.Draw(mSaveRect.x, mSaveRect.y)
		If currentModel
			If currentModel.Mesh.NumBones > 0 Then DrawCheckbox(mAnimationsRect, "Export Animations", mFont, mExportAnimations)
			'DrawPanel(mPitchRect, "Pitch: " + mPitchFix, mFont)
			'DrawPanel(mYawRect, "Yaw: " + mYawFix, mFont)
			'DrawPanel(mRollRect, "Roll: " + mRollFix, mFont)
			
			'Draw loaded mesh info
			Renderer.Color(Color.WHITE)
			mFont.Draw(8, 34, "Num Surfaces: " + currentModel.Mesh.NumSurfaces)
			mFont.Draw(8, 50, "Num Bones: " + currentModel.Mesh.NumBones)
			mFont.Draw(8, 66, "Num Frames: " + currentModel.Mesh.NumFrames)
			If currentModel.Mesh.NumFrames > 0 Then mFont.Draw(8, 80, "Current Frame: " + Int(currentModel.CurrentFrame))
			'mFont.Draw(8, 66, "Anim Duration: " + currentModel.Mesh.AnimDuration)
			'If currentModel.Mesh.AnimDuration <> 0 Then mFont.Draw(8, 80, "Anim Time: " + currentModel.AnimTime)
			
			'Draw material panel
			DrawPanel(mMaterialRect)
			DrawPanel(mMaterialRect.x + mSelMatRect.x, mMaterialRect.y + mSelMatRect.y, mSelMatRect.width, mSelMatRect.height, "Material #" + mSelMat, mFont)
			
			'Draw color panel
			Local color:Int = currentModel.Material(mSelMat).Color
			DrawPanel(mMaterialRect.x + mDiffuseColorRect.x, mMaterialRect.y + mDiffuseColorRect.y, mDiffuseColorRect.width, mDiffuseColorRect.height, "Color", mFont, Color.RGB(Color.Red(color), Color.Green(color), Color.Blue(color), 255))
			
			'Diffuse
			If currentModel.Material(mSelMat).ColorTexture
				Renderer.Color(Color.WHITE)
				currentModel.Material(mSelMat).ColorTexture.Draw(mMaterialRect.x + mDiffuseTexRect.x, mMaterialRect.y + mDiffuseTexRect.y, mDiffuseTexRect.width, mDiffuseTexRect.height)
			Else
				DrawPanel(mMaterialRect.x + mDiffuseTexRect.x, mMaterialRect.y + mDiffuseTexRect.y, mDiffuseTexRect.width, mDiffuseTexRect.height)
			End
			
			'Normal
			If currentModel.Material(mSelMat).NormalTexture
				Renderer.Color(Color.WHITE)
				currentModel.Material(mSelMat).NormalTexture.Draw(mMaterialRect.x + mNormalTexRect.x, mMaterialRect.y + mNormalTexRect.y, mNormalTexRect.width, mNormalTexRect.height)
			Else
				DrawPanel(mMaterialRect.x + mNormalTexRect.x, mMaterialRect.y + mNormalTexRect.y, mNormalTexRect.width, mNormalTexRect.height)
			End
			
			'Specular
			If currentModel.Material(mSelMat).SpecularTexture
				Renderer.Color(Color.WHITE)
				currentModel.Material(mSelMat).SpecularTexture.Draw(mMaterialRect.x + mSpecularTexRect.x, mMaterialRect.y + mSpecularTexRect.y, mSpecularTexRect.width, mSpecularTexRect.height)
			Else
				DrawPanel(mMaterialRect.x + mSpecularTexRect.x, mMaterialRect.y + mSpecularTexRect.y, mNormalTexRect.width, mSpecularTexRect.height)
			End
			
			'Lightmap
			If currentModel.Material(mSelMat).LightTexture
				Renderer.Color(Color.WHITE)
				currentModel.Material(mSelMat).LightTexture.Draw(mMaterialRect.x + mLightmapRect.x, mMaterialRect.y + mLightmapRect.y, mLightmapRect.width, mLightmapRect.height)
			Else
				DrawPanel(mMaterialRect.x + mLightmapRect.x, mMaterialRect.y + mLightmapRect.y, mLightmapRect.width, mLightmapRect.height)
			End
			
			'Cubemap
			If currentModel.Material(mSelMat).CubeTexture
				Renderer.Color(Color.WHITE)
				currentModel.Material(mSelMat).CubeTexture.Draw(mMaterialRect.x + mCubemapRect.x, mMaterialRect.y + mCubemapRect.y, mCubemapRect.width, mCubemapRect.height)
			Else
				DrawPanel(mMaterialRect.x + mCubemapRect.x, mMaterialRect.y + mCubemapRect.y, mCubemapRect.width, mCubemapRect.height)
			End
			
			'Draw texts
			Renderer.Color(Color.WHITE)
			mFont.Draw(mMaterialRect.x + mDiffuseTexRect.x + 2, mMaterialRect.y + mDiffuseTexRect.y, "Color")
			mFont.Draw(mMaterialRect.x + mNormalTexRect.x + 2, mMaterialRect.y + mNormalTexRect.y, "Normal")
			mFont.Draw(mMaterialRect.x + mSpecularTexRect.x + 2, mMaterialRect.y + mSpecularTexRect.y, "Specular")
			mFont.Draw(mMaterialRect.x + mLightmapRect.x + 2, mMaterialRect.y + mLightmapRect.y, "Light")
			mFont.Draw(mMaterialRect.x + mCubemapRect.x + 2, mMaterialRect.y + mCubemapRect.y, "Cube")
	
			DrawPanel(mMaterialRect.x + mRefractionCoefRect.x, mMaterialRect.y + mRefractionCoefRect.y, mRefractionCoefRect.width, mRefractionCoefRect.height, "Refr. Coef: " + String(currentModel.Material(mSelMat).RefractionCoef)[..4], mFont)
			DrawPanel(mMaterialRect.x + mOpacityRect.x, mMaterialRect.y + mOpacityRect.y, mOpacityRect.width, mOpacityRect.height, "Opacity: " + String(Color.Alpha(currentModel.Material(mSelMat).Color))[..3], mFont)
			DrawPanel(mMaterialRect.x + mShininessRect.x, mMaterialRect.y + mShininessRect.y, mShininessRect.width, mShininessRect.height, "Shininess: " + String(currentModel.Material(mSelMat).Shininess)[..4], mFont)
			Local blendStr:String = ""
			Select currentModel.Material(mSelMat).BlendMode
			Case Renderer.BLEND_SOLID
				blendStr = "Solid"
			Case Renderer.BLEND_ALPHA
				blendStr = "Alpha"
			Case Renderer.BLEND_ADD
				blendStr = "Add"
			Case Renderer.BLEND_MUL
				blendStr = "Mul"
			End
			DrawPanel(mMaterialRect.x + mBlendModeRect.x, mMaterialRect.y + mBlendModeRect.y, mBlendModeRect.width, mBlendModeRect.height, "Blend: " + blendStr, mFont)
			DrawCheckbox(mMaterialRect.x + mCullingRect.x, mMaterialRect.y + mCullingRect.y, mCullingRect.width, mCullingRect.height, "Culling", mFont, currentModel.Material(mSelMat).Culling)
			DrawCheckbox(mMaterialRect.x + mDepthWriteRect.x, mMaterialRect.y + mDepthWriteRect.y, mDepthWriteRect.width, mDepthWriteRect.height, "Depth Write", mFont, currentModel.Material(mSelMat).DepthWrite)
		End
	End
	
	Method ResetProperties:Void()
		mSelMat = 0
		mPitchFix = 0
		mYawFix = 0
		mRollFix = 0
	End
Private
	'Resources
	Field mFont					: Font
	Field mCubeTex				: Texture
	Field mOpenTex				: Texture
	Field mSaveTex				: Texture
	Field mCube					: Mesh
	
	'Widgets
	Field mPanelRect			: Rect
	Field mCubeRect				: Rect
	Field mOpenRect				: Rect
	Field mSaveRect				: Rect
	Field mAnimationsRect		: Rect
	Field mPitchRect			: Rect
	Field mYawRect				: Rect
	Field mRollRect				: Rect
	Field mMaterialRect			: Rect
	Field mSelMatRect			: Rect
	Field mDiffuseColorRect		: Rect
	Field mDiffuseTexRect			: Rect
	Field mNormalTexRect			: Rect
	Field mSpecularTexRect		: Rect
	Field mLightmapRect				: Rect
	Field mCubemapRect				: Rect
	Field mRefractionCoefRect	: Rect
	Field mOpacityRect				: Rect
	Field mShininessRect			: Rect
	Field mBlendModeRect			: Rect
	Field mCullingRect				: Rect
	Field mDepthWriteRect			: Rect
	
	'Logic
	Field mExportAnimations		: Bool
	Field mSelMat				: Int
	Field mPitchFix				: Int
	Field mYawFix				: Int
	Field mRollFix				: Int
End
