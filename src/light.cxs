Strict

Private
Import color
Import math3d
Import renderer
Import world

Public
Import entity

Class Light Extends Entity Final
	'Const TYPE_DIRECTIONAL	: Int = 0
	'Const TYPE_POINT		: Int = 1
	
	Method New(parent:Entity = Null)
		Super.New(parent)
		'mType = Clamp(type, TYPE_DIRECTIONAL, TYPE_POINT)
		mColor = color.Color.WHITE
		Radius = 100
		Visible = True
	End
	
	Method Visible:Bool() Property
		Return Super.Visible
	End	
	
	Method Visible:Void(visible:Bool) Property
		If visible <> Super.Visible
			Super.Visible(visible)
			If visible
				World._AddLight(Self)
			Else
				World._FreeLight(Self)
			End
		End
	End
	
	Method Width:Float() Property
		Return 0
	End
	
	Method Height:Float() Property
		Return 0
	End
	
	Method Depth:Float() Property
		Return 0
	End
	
	#Rem
	Method Type:Int() Property
		Return mType
	End
	
	Method Type:Void(type:Int) Property
		mType = type
	End
	#End
	
	Method Color:Int() Property
		Return mColor
	End
	
	Method Color:Void(color:Int) Property
		mColor = color
	End
	
	Method _PrepareForRender:Void()
		#Rem
		If mType = TYPE_DIRECTIONAL
			mTempQuat.SetEuler(Pitch, Yaw, Roll)
			mTempQuat.Mul(0, 0, -1)
			Renderer.ViewMatrix().Mul(mTempQuat.ResultVector().X, mTempQuat.ResultVector().Y, mTempQuat.ResultVector().Z, 0.0)
			Renderer.SetLight(mNumber, Mat4.ResultVector().X, Mat4.ResultVector().Y, Mat4.ResultVector().Z, 0.0, color.Color.Red(mColor) / 255.0, color.Color.Green(mColor) / 255.0, color.Color.Blue(mColor) / 255.0, Radius)
		Else
		#End
			Renderer.ViewMatrix().Mul(WorldX, WorldY, WorldZ, 1.0)
			Renderer.SetLight(mNumber, Mat4.ResultVector().X, Mat4.ResultVector().Y, Mat4.ResultVector().Z, 1.0, color.Color.Red(mColor) / 255.0, color.Color.Green(mColor) / 255.0, color.Color.Blue(mColor) / 255.0, Radius)
		'End
	End
	
	Method _Number:Int() Property
		Return mNumber
	End
	
	Method _Number:Void(number:Int) Property
		mNumber = number
	End
Private
	Field mNumber		: Int
	Field mType			: Int
	Field mColor		: Int
	Global mTempQuat	: Quat = Quat.Create()
End
