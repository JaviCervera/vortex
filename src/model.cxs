Strict

Private
Import material
Import math3d
Import mesh
Import renderer
Import renderstate
Import world

Public
Import entity

Class Model Extends Entity 'Implements IMaterialDelegate Final
	Method New(mesh:Mesh, parent:Entity = Null)
		Super.New(parent)
		mMesh = mesh
		mMaterials = New Material[mMesh.NumSurfaces]
		For Local i:Int = 0 Until mMaterials.Length
			mMaterials[i] = New Material(mMesh.Material(i))', Self)
		Next
		'mAnimMatrices = New Float[mesh.NumBones][]
		'For Local i:Int = 0 Until mAnimMatrices.Length
		'	mAnimMatrices[i] = New Float[16]
		'	Mat4Identity(mAnimMatrices[i])
		'Next
		'mAnimFps = mesh.AnimFps
		mCurrentFrame = 0
		mFirstFrame = 0
		mLastFrame = mesh.NumFrames
		Visible = True
		Active = True
	End
	
	Method Mesh:Mesh() Property
		Return mMesh
	End
	
	Method AnimSequence:String() Property
		Return mAnimSeq
	End
	
	Method AnimSequence:Void(name:String) Property
		Local index:Int = mMesh._AnimSeqIndex(name)
		If index > -1
			mAnimSeq = name
			mAnimFps = mMesh._AnimSeqFps(index)
			mFirstFrame = mMesh._AnimSeqFirstFrame(index)
			mLastFrame = mMesh._AnimSeqLastFrame(index)
		End
	End
	
	Method AnimFPS:Float() Property
		Return mAnimFps
	End
	
	Method AnimFPS:Void(fps:Float) Property
		mAnimFps = fps
		If mLastFrame = 0 Then mLastFrame = Mesh.NumFrames
	End
	
	Method CurrentFrame:Float() Property
		Return mCurrentFrame
	End
	
	Method FirstFrame:Int() Property
		Return mFirstFrame
	End
	
	Method FirstFrame:Void(frame:Int) Property
		mFirstFrame = frame
	End
	
	Method LastFrame:Int() Property
		Return mLastFrame
	End
	
	Method LastFrame:Void(frame:Int) Property
		mLastFrame = frame
	End
	
	#Rem
	Method AnimSpeed:Float() Property
		Return mAnimSpeed
	End
	
	Method AnimSpeed:Void(speed:Float) Property
		mAnimSpeed = speed
	End
	
	Method AnimTime:Float() Property
		Return mCurrentFrame / mMesh._AnimSpeed
	End
	#End
	
	Method Active:Bool() Property
		Return Super.Active
	End
	
	Method Active:Void(active:Bool) Property
		If active <> Super.Active
			Super.Active(active)
			
			'Only animated models need to care about updating
			'If mMesh.NumFrames > 0 Then World._EntityNeedsUpdate(Self, active)
			World._EntityNeedsUpdate(Self, active)
		End
	End
	
	Method Visible:Bool() Property
		Return Super.Visible
	End
	
	Method Visible:Void(visible:Bool) Property
		If visible <> Super.Visible
			Super.Visible(visible)
			World._EntitySetVisible(Self, visible)
			#Rem
			If visible
				For Local i:Int = 0 Until mMesh.NumSurfaces
					World._AddSurfaceToRenderList(mMesh.Surface(i), _Transform, mAnimMatrices, mMaterials[i])
				Next
			Else
				For Local i:Int = 0 Until mMesh.NumSurfaces
					World._RemoveSurfaceFromRenderList(mMesh.Surface(i), _Transform, mAnimMatrices, mMaterials[i])
				Next
			End
			#End
		End
	End
	
	Method Width:Float() Property
		Return mMesh.Width * ScaleX
	End
	
	Method Height:Float() Property
		Return mMesh.Height * ScaleY
	End
	
	Method Depth:Float() Property
		Return mMesh.Depth * ScaleZ
	End
	
	Method NumMaterials:Int() Property
		Return mMaterials.Length
	End
	
	Method Material:Material(index:Int)
		Return mMaterials[index]
	End
	
	Method Material:Material() Property
		Return Material(0)
	End
	
	Method BoxMinX:Float() Property
		Return WorldX + mMesh.BoxMinX * ScaleX
	End
	
	Method BoxMinY:Float() Property
		Return WorldY + mMesh.BoxMinY * ScaleY
	End
	
	Method BoxMinZ:Float() Property
		Return WorldZ + mMesh.BoxMinZ * ScaleZ
	End
	
	Method BoxMaxX:Float() Property
		Return WorldX + mMesh.BoxMaxX * ScaleX
	End
	
	Method BoxMaxY:Float() Property
		Return WorldY + mMesh.BoxMaxY * ScaleY
	End
	
	Method BoxMaxZ:Float() Property
		Return WorldZ + mMesh.BoxMaxZ * ScaleZ
	End
	
	#Rem
	Method MaterialChanged:Void(mat:Material)
		Local index:Int = -1
		For Local i:Int = 0 Until mMaterials.Length
			If mMaterials[i] = mat Then index = i; Exit
		Next
		If index <> -1
			World._RemoveSurfaceFromRenderList(mMesh.Surface(index), _Transform)
			If Visible Then World._AddSurfaceToRenderList(mMesh.Surface(index), _Transform, mat)
		End
	End
	#End
	
	Method _Update:Void()
		If mAnimFps <> 0
			mCurrentFrame += mAnimFps * World.DeltaTime()
			'mCurrentFrame += mAnimSpeed * mMesh._AnimSpeed * World.DeltaTime()
			If mCurrentFrame > mLastFrame Then mCurrentFrame -= mLastFrame - mFirstFrame
			If mCurrentFrame < mFirstFrame Then mCurrentFrame += mLastFrame - mFirstFrame
			'If mAnimMatrices.Length > 0	Then mMesh._Animate(mAnimMatrices, mCurrentFrame, mFirstFrame, mLastFrame)
		End
	End
	
	Method _Render:Int(step_:Int)
		'If animating and vertex animated, update here
		'If mAnimFps <> 0 And mAnimMatrices.Length = 0 Then mMesh._AnimateVertices(mCurrentFrame, mFirstFrame, mLastFrame)
		If mAnimFps <> 0 Then mMesh._AnimateVertices(mCurrentFrame, mFirstFrame, mLastFrame)
	
		Local numRenders:Int = 0
		Super._Render(step_)
		'RenderState.Skinned = mAnimMatrices.Length > 0
		'If mAnimMatrices.Length > 0 Then RenderState.BoneMatrices = mAnimMatrices
		For Local i:Int = 0 Until mMesh.NumSurfaces
			If mMaterials[i]._PrepareForRender(step_) Then mMesh.Surface(i)._Render(); numRenders += 1
		Next
		Return numRenders
	End
Private
	Field mMesh					: Mesh
	Field mMaterials		: Material[]
	'Field mAnimMatrices	: Float[][16]
	Field mAnimFps			: Float
	'Field mAnimSpeed		: Float
	Field mCurrentFrame	: Float
	Field mFirstFrame		: Int
	Field mLastFrame		: Int
	Field mAnimSeq			: String
	
	Method New()
	End
End
