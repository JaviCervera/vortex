Strict

Private

Import mojo.audio
Import entity

Class EmittedSound
	Field Channel	: Int
	Field Emitter	: Entity
	Field Radius	: Float
	
	Method New(channel:Int, emitter:Entity, radius:Float)
		Channel = channel
		Emitter = emitter
		Radius = radius
	End
	
	Method _Update:Bool()
		Local state:Int = ChannelState(Channel)
		If state = 1	'Playing
			Local angle:Float = ATan2(Emitter.WorldX - Listener.Instance().WorldX, Emitter.WorldZ - Listener.Instance().WorldZ) - Listener.Instance().Yaw
			Local pan:Float = Sin(angle)
			Local vol:Float = 1.0 - Clamp(Emitter.Distance(Listener.Instance())/Radius, 0.0, 1.0)
			SetChannelPan(Channel, pan)
			SetChannelVolume(Channel, vol)
		Elseif state = 0 Or state = -1 'Stopped or unknown
			Return False
		End
		Return True
	End
End

Public
Class Listener Final	
	Function Instance:Entity()
		Return mListener
	End
	
	Function Instance:Void(e:Entity)
		If e <> Null Then mListener = e
	End
	
	Function AvailableChannel:Int()
		For Local i:Int = 1 Until 32
			If ChannelState(i) = 0 Or ChannelState(i) = -1 Then Return i
		Next
		Return -1
	End
	
	Function _EmitSound:Void(e:Entity, sound:Sound, radius:Float, channel:Int)
		Local vol:Float = 0
		If mListener Then vol = 1.0 - Clamp(e.Distance(mListener)/radius, 0.0, 1.0)
		If mListener <> Null And vol >= 0.01 And channel <> -1
			PlaySound(sound, channel, False)
			Local emitted:EmittedSound = New EmittedSound(channel, e, radius)
			emitted._Update()
			mEmittedSounds.AddLast(emitted)
		End
	End
	
	Function _Update:Void()
		If mListener <> Null
			For Local es:EmittedSound = Eachin mEmittedSounds
				If Not es._Update() Then mEmittedSounds.RemoveFirst(es)
			Next
		End
	End
Private
	Method New()
	End
	
	Global mListener:Entity
	Global mEmittedSounds:List<EmittedSound> = New List<EmittedSound>
End
