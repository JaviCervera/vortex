Strict

Private
Import brl.databuffer
Import cache
Import renderer

Public
Class Texture Final
Public
	Method New(width:Int, height:Int)
		mHandle = Renderer.CreateTexture(width, height)
		mWidth = width
		mHeight = height
		mIsCubic = False
	End

	Method New(buffer:DataBuffer, width:Int, height:Int, filter:Int = Renderer.FILTER_TRILINEAR)
		mHandle = Renderer.CreateTexture(buffer, width, height, filter)
		mWidth = width
		mHeight = height
		mIsCubic = False
	End
	
	Function Load:Texture(filename:String, filter:Int = Renderer.FILTER_TRILINEAR, cache:Bool = True)
		If cache
			Return Cache._LoadTexture(filename, filter)
		Else
			Return _Load(filename, filter)
		End
	End
	
	Function Load:Texture(left:String, right:String, front:String, back:String, top:String, bottom:String, filter:Int = Renderer.FILTER_TRILINEAR, cache:Bool = True)
		If cache
			Return Cache._LoadTexture(left, right, front, back, top, bottom, filter)
		Else
			Return _Load(left, right, front, back, top, bottom, filter)
		End
	End

	Method Discard:Void()
		If mHandle <> 0 Then Renderer.FreeTexture(mHandle)
		mHandle = 0
	End

	Method Filename:String() Property
		Return mFilename
	End
	
	Method Filename:Void(filename:String) Property
		mFilename = filename
	End

	Method Handle:Int() Property
		Return mHandle
	End

	Method Width:Int() Property
		Return mWidth
	End

	Method Height:Int() Property
		Return mHeight
	End
	
	Method IsCubic:Bool() Property
		Return mIsCubic
	End

	Method Draw:Void(x:Float, y:Float, width:Float = 0, height:Float = 0, rectx:Float = 0, recty:Float = 0, rectwidth:Float = 0, rectheight:Float = 0)
		If rectwidth = 0 Then rectwidth = Width
		If rectheight = 0 Then rectheight = Height
		If width = 0 Then width = rectwidth
		If height = 0 Then height = rectheight

		'Calculate texcoords in 0..1 range, independently from frame
		Local u0:Float = rectx / Width * Sgn(width)
		Local v0:Float = recty / Height * Sgn(height)
		Local u1:Float = (rectx + rectwidth) / Width * Sgn(width)
		Local v1:Float = (recty + rectheight) / Height * Sgn(height)

		'Render
		Renderer.SetTextures(mHandle, 0, 0, 0, 0, mIsCubic)
		Renderer.DrawRectEx(x, y, Abs(width), Abs(height), u0, v0, u1, v1)
		Renderer.SetTextures(0, 0, 0, 0, 0, False)
	End
	
	Function _Load:Texture(filename:String, filter:Int = Renderer.FILTER_TRILINEAR)
		filename = filename.Replace("\", "/")
		Local handle:Int = Renderer.LoadTexture(filename, mSizeArr, filter)
		If mSizeArr[0] > 0
			Local tex:Texture = New Texture
			tex.mFilename = filename
			tex.mHandle = handle
			tex.mWidth = mSizeArr[0]
			tex.mHeight = mSizeArr[1]
			tex.mIsCubic = False
			Return tex
		Else
			Return Null
		End
	End
	
	Function _Load:Texture(left:String, right:String, front:String, back:String, top:String, bottom:String, filter:Int = Renderer.FILTER_TRILINEAR)
		left = left.Replace("\", "/")
		right = right.Replace("\", "/")
		front = front.Replace("\", "/")
		back = back.Replace("\", "/")
		top = top.Replace("\", "/")
		bottom = bottom.Replace("\", "/")
		Local handle:Int = Renderer.LoadCubicTexture(left, right, front, back, top, bottom, mSizeArr, filter)
		If mSizeArr[0] > 0
			Local tex:Texture = New Texture
			tex.mFilename = left + "," + right + "," + front + "," + back + "," + top + "," + bottom
			tex.mHandle = handle
			tex.mWidth = mSizeArr[0]
			tex.mHeight = mSizeArr[1]
			tex.mIsCubic = True
			Return tex
		Else
			Return Null
		End
	End
Private
	Method New()
	End

	Field mFilename	: String
	Field mHandle	: Int
	Field mWidth	: Int
	Field mHeight	: Int
	Field mIsCubic	: Bool
	Global mSizeArr	: Int[2]
End
