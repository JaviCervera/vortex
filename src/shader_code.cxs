Strict

Const SHADER_VAR_PRECISION:String = "" +
"#ifdef GL_ES~n" +
'"precision highp int;~n" +
"precision mediump int;~n" +
"precision mediump float;~n" +
"#endif~n"

Const STD_VARYING_VARS:String = "" +
"varying vec3 fpos;" +
"varying vec3 fposNorm;" +
"varying vec3 fnormal;" +
"varying vec4 fcolor;" +
"varying vec4 ftex;" +
"varying vec3 fcombinedDiffuse;" +
"varying vec3 fcombinedSpecular;" +
"varying float fogFactor;" +
"varying vec3 fcubeCoords;" +
"varying vec3 fdepthCoords;" +
"varying mat3 tbnMatrix;"

Const STD_VERTEX_VARS:String = "" +
"uniform mat4 mvp;" +
"uniform mat4 modelView;" +
"uniform mat4 normalMatrix;" +
"uniform mat4 textureMatrix;" +
"uniform mat4 invView;" +
"uniform mat4 depthBias;" +
'"uniform int flags;" +
"uniform int numLights;" +
"uniform vec4 lightPos[MAX_LIGHTS];" + 'In viewer space !!!
"uniform vec3 lightColor[MAX_LIGHTS];" +
"uniform float lightRadius[MAX_LIGHTS];" +
"uniform vec4 baseColor;" +
"uniform vec3 ambient;" +
"uniform float shininess;" +
"uniform float refractCoef;" +
"uniform vec2 fogDist;" +
"uniform mat4 bones[MAX_BONES];" +
'These uniforms should be compacted into a flags int
"uniform int baseTexMode;" +
"uniform bool useNormalTex;" +
"uniform bool useSpecularTex;" +
"uniform bool useCubemap;" +
"uniform bool usePixelLighting;" +
"uniform bool fogEnabled;" +
"uniform bool skinned;" +
"attribute vec3 vpos;" +
"attribute vec3 vnormal;" +
"attribute vec3 vtangent;" +
"attribute vec4 vcolor;" +
"attribute vec4 vtex;" +
"attribute vec4 vboneIndices;" +
"attribute vec4 vboneWeights;" +
STD_VARYING_VARS

Const STD_FRAGMENT_VARS:String = "" +
'"uniform int flags;" +
"uniform sampler2D baseTexSampler;" +
"uniform samplerCube baseCubeSampler;" +
"uniform sampler2D normalTexSampler;" +
"uniform sampler2D specularTexSampler;" +
"uniform sampler2D lightmapSampler;" +
"uniform samplerCube cubemapSampler;" +
"uniform sampler2D depthSampler;" +
"uniform int numLights;" +
"uniform vec4 lightPos[MAX_LIGHTS];" +	'In viewer space !!!
"uniform vec3 lightColor[MAX_LIGHTS];" +
"uniform float lightRadius[MAX_LIGHTS];" +
"uniform vec3 ambient;" +
"uniform float shininess;" +
"uniform vec3 fogColor;" +
"uniform float depthEpsilon;" +
'These uniforms should be compacted into a flags int
"uniform bool solidMode;" +
"uniform int baseTexMode;" +
"uniform bool useNormalTex;" +
"uniform bool useSpecularTex;" +
"uniform bool useLightmap;" +
"uniform bool useCubemap;" +
"uniform bool usePixelLighting;" +
"uniform bool fogEnabled;" +
"uniform bool shadowsEnabled;" +
STD_VARYING_VARS

Const SHADER_CALC_LIGHTING:String = "" +
"struct LightingResult { vec3 combinedDiffuse; vec3 combinedSpecular; };" +
"LightingResult CalcLighting(vec3 V, vec3 NV, vec3 N, vec3 texSpecular) {" +
"	float normShininess = float(shininess) / 10240.0;" +
"	LightingResult lighting;" +
"	lighting.combinedDiffuse = ambient;" +
"	lighting.combinedSpecular = vec3(0.0, 0.0, 0.0);" +

	'Compute all lights
"	for ( int i = 0; i < MAX_LIGHTS; ++i ) {" +
"		if ( i >= numLights ) break;" +
"   	vec3 L = vec3(lightPos[i]);" +
"   	float att = 1.0;" +

		'Point light
"		if ( lightPos[i].w == 1.0 ) {" +
"			L -= V;" +
"			att = 1.0 - clamp(length(L) / lightRadius[i], 0.0, 1.0);" +
"		}" +

"		L = normalize(L);" +
"		float NdotL = max(dot(N, L), 0.0);" +

		'Diffuse
"		lighting.combinedDiffuse += NdotL * lightColor[i] * att;" +

		'Specular
"		if ( shininess > 0.0 && NdotL > 0.0 ) {" +
"			vec3 H = normalize(L - NV);" +
"			float NdotH = max(dot(N, H), 0.0);" +
"			lighting.combinedSpecular += pow(NdotH, shininess * texSpecular.r * 64.0) * lightColor[i] * texSpecular * shininess * att;" +
"		}~n" +
"	}~n" +

"	lighting.combinedDiffuse = clamp(lighting.combinedDiffuse, 0.0, 1.0);" +
"	lighting.combinedSpecular = clamp(lighting.combinedSpecular, 0.0, 1.0);" +
"	return lighting;" +
"}"

Const STD_VERTEX_SHADER:String = SHADER_VAR_PRECISION + STD_VERTEX_VARS + SHADER_CALC_LIGHTING +
"void main() {" +
"	vec4 vpos4 = vec4(vpos, 1);" +

	'Vertex skinning
"	if ( skinned ) {" +
"		mat4 boneTransform = mat4(1);" +
"		for ( int i = 0; i < 4; ++i ) {" +
"			int index = int(vboneIndices[i]);" +
"			if ( index > -1 ) boneTransform += bones[index] * vboneWeights[i];" +
"		}" +
"		vpos4 = boneTransform * vpos4;" +
"	};" +

	'Vertex position in projection space
"	gl_Position = mvp * vpos4;" +

	'Vertex position in depth space
"	fdepthCoords = vec3(depthBias * vpos4);" +

	'Fragment color
"	fcolor = baseColor * vcolor;" +

	'Fragment texture coords
"	vec2 tex0 = vec2(textureMatrix * vec4(vec2(vtex), 0, 1));" +
"	ftex = vec4(tex0.x, tex0.y, vtex.z, vtex.w);" +

	'Calculate vectors used in lighting and env mapping
"	vec3 V;" +
"	vec3 NV;" +
"	vec3 N;" +
"	if ( numLights > 0 || baseTexMode == 2 || useNormalTex || useSpecularTex || useCubemap || fogEnabled ) {" +
		'Calculate vertex in viewer space~n" +
" 		V = vec3(modelView * vpos4);" +

"		if ( numLights > 0 || baseTexMode == 2 || useNormalTex || useSpecularTex || useCubemap ) {" +
			'Calculate normalized vertex coordinates
"			NV = normalize(V);" +

			'Calculate normal in viewer space
"			N = normalize(vec3(normalMatrix * vec4(vnormal, 0.0)));" +
"		}~n" +
"	}~n" +

	'Lighting
"	if ( numLights > 0 ) {" +
"		if ( !usePixelLighting && !useNormalTex && !useSpecularTex ) {" +
			'Calculate lighting
"			LightingResult lighting = CalcLighting(V, NV, N, vec3(1, 1, 1));" +
"			fcombinedDiffuse = lighting.combinedDiffuse;" +
"			fcombinedSpecular = lighting.combinedSpecular;" +
"		} else {" +
"			fpos = V;" +
"			fposNorm = NV;" +
"			fnormal = N;" +
"		}" +
"	}" +

	'Fog
"	if ( fogEnabled ) fogFactor = clamp((fogDist[1] - abs(V.z)) / (fogDist[1] - fogDist[0]), 0.0, 1.0);" +

	'Cube mapping coordinates
"	if ( baseTexMode == 2 || useCubemap ) {" +
" 	if ( baseTexMode == 2 ) fcubeCoords = vec3(invView * vec4(NV, 0));" +
"		else if ( refractCoef < 0.0 ) fcubeCoords = normalize(vec3(invView * vec4(reflect(NV, N), 0)));" +
"		else fcubeCoords = normalize(vec3(invView * vec4(refract(NV, N, refractCoef), 0)));" +
"	}" +

	'Calculate TBN matrix
"	if ( numLights > 0 && useNormalTex ) {" +
" 		vec3 eyeTangent = normalize(vec3(normalMatrix * vec4(vtangent, 0)));" +
"		vec3 eyeBitangent = cross(eyeTangent, N);" +
"		tbnMatrix = mat3(eyeTangent, eyeBitangent, N);" +
"	}" +
"}"

Const STD_FRAGMENT_SHADER:String = SHADER_VAR_PRECISION + STD_FRAGMENT_VARS + SHADER_CALC_LIGHTING +
"void main() {" +
	'First, if the fragment is in the fog completely, set it's color directly
"	if ( fogEnabled && fogFactor < 0.004 ) { gl_FragColor = vec4(fogColor, 1); return; }" +

	'Then, we read the base texture to discard the fragment immediately if it is transparent
"	vec4 baseTexture = vec4(1, 1, 1, 1);" +
"	if ( baseTexMode == 1 ) baseTexture = texture2D(baseTexSampler, vec2(ftex));" +
"	else if ( baseTexMode == 2 ) baseTexture = textureCube(baseCubeSampler, fcubeCoords);" +

	'Reject fragment with low alpha
"	if ( !solidMode && (fcolor.a <= 0.004 || baseTexture.a <= 0.004) ) discard;" +
	
	'Vars
"	vec4 combinedColor = vec4(1, 1, 1, 1);" +
"	vec4 combinedSpecular = vec4(0, 0, 0, 0);" +

	'Shadows
"	bool shadowed = false;" +
"	if ( shadowsEnabled && fdepthCoords.x >= 0.0 && fdepthCoords.x <= 1.0 && fdepthCoords.y >= 0.0 && fdepthCoords.y <= 1.0 && fdepthCoords.z >= 0.0 && fdepthCoords.z <= 1.0 && texture2D(depthSampler, vec2(fdepthCoords)).z < fdepthCoords.z - depthEpsilon ) shadowed = true;" +
'"	if ( fdepthCoords.x < 0.0 || fdepthCoords.x > 1.0 || fdepthCoords.y < 0.0 || fdepthCoords.y > 1.0 ) { gl_FragColor = vec4(1, 0, 1, 1); return; }" +
'"	if ( fdepthCoords.z < 0.0 || fdepthCoords.z > 1.0 ) { gl_FragColor = vec4(1, 1, 0, 1); return; }" +

  'Calculate texture specular
" vec3 texSpecular = useSpecularTex ? vec3(texture2D(specularTexSampler, vec2(ftex))) : vec3(1, 1, 1);" +

	'Lighting
"	if ( numLights > 0 ) {" +
		'Only apply if fragment is not shadowed
"		if ( !shadowed ) { " +
			'Per pixel lighting
"			if ( usePixelLighting || useNormalTex ) {" +
				'Get fragment normal or compute from normal map
"				vec3 normal = fnormal;" +
"				if ( useNormalTex ) {" +
"					vec3 normalTexColor = vec3(texture2D(normalTexSampler, vec2(ftex)));" +
"					normal = tbnMatrix * (normalTexColor*2.0 - 1.0);" +
"				}" +

				'Calc lighting
"				LightingResult lighting = CalcLighting(fpos, fposNorm, normal, texSpecular);" +
"				combinedColor = vec4(lighting.combinedDiffuse, 1);" +
"				combinedSpecular = vec4(lighting.combinedSpecular, 0);" +
			'Apply vertex lighting
"			} else {" +
"				combinedColor = vec4(fcombinedDiffuse, 1);" +
"				combinedSpecular = vec4(fcombinedSpecular, 0);" +
"			}" +
"		} else {" +
"			combinedColor = vec4(ambient, 1);" +
"		}" +
"	}"+

	'Lightmap
"	if ( useLightmap ) {" +
"		if ( numLights > 0 ) combinedColor += vec4(vec3(texture2D(lightmapSampler, vec2(ftex.z, ftex.w))), 0.0);" +
"		else combinedColor = texture2D(lightmapSampler, vec2(ftex.z, ftex.w));" +
"	}" +

	'Base color
"	combinedColor *= fcolor;" +

	'Base texture
"	combinedColor *= baseTexture;" +

	'Cubemap
"	if ( useCubemap ) {" +
"		combinedColor *= textureCube(cubemapSampler, fcubeCoords);" +
"	}" +

	'Add specular
"	if ( numLights > 0 && !shadowed ) combinedColor = clamp(combinedColor + combinedSpecular, 0.0, 1.0);" +

	'Add fog
"	if ( fogEnabled ) combinedColor = vec4(mix(fogColor, vec3(combinedColor), fogFactor), combinedColor.a);" +

	'Set final color
"	gl_FragColor = combinedColor;" +
"}"

Const SHADOW_VERTEX_SHADER:String = SHADER_VAR_PRECISION +
"uniform mat4 mvp;" +
"attribute vec3 vpos;" +
'"varying float depth;" +
"void main() {" +
"	gl_Position = mvp * vec4(vpos, 1);" +
'"	depth = gl_Position.z / gl_Position.w;" +
"}"

Const SHADOW_FRAGMENT_SHADER:String = SHADER_VAR_PRECISION +
'"varying float depth;" +
"void main() {" +
"	float depth = gl_FragCoord.z / gl_FragCoord.w;" +
"	gl_FragColor = vec4(depth, depth, depth, 1);" +
"}"

Const _2D_VERTEX_SHADER:String = SHADER_VAR_PRECISION +
"uniform mat4 mvp;" +
"uniform mat4 textureMatrix;" +
"attribute vec3 vpos;" +
"attribute vec4 vtex;" +
"varying vec2 ftex;" +
"void main() {" +
"	gl_Position = mvp * vec4(vpos, 1.0);" +
"	ftex = vec2(textureMatrix * vec4(vec2(vtex), 0, 1));" +
"}"

Const _2D_FRAGMENT_SHADER:String = SHADER_VAR_PRECISION +
"uniform int baseTexMode;" +
"uniform sampler2D baseTexSampler;" +
"uniform samplerCube baseCubeSampler;" +
"uniform vec4 baseColor;" +
"varying vec2 ftex;" +
"void main() {" +
"	gl_FragColor = baseColor;" +
"	if ( baseTexMode == 1 ) gl_FragColor *= texture2D(baseTexSampler, ftex);" +
"	else if ( baseTexMode == 2 ) gl_FragColor *= textureCube(baseCubeSampler, vec3(ftex.x, -ftex.y, 1));" +
"}"
