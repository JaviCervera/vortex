# Module vortex

The Vortex module adds a very simple 3D rendering engine based on OpenGL ES 2.

More than a full 3D engine, it provides a lower-level API, similar than what the official Mojo offers for 3D.

Coordinate system and rotations:

Vortex uses a right-handed coordinate system, where X points right, Y points away from the viewer, and Z points up. Rotations can be expressed both using quaternions and euler angles (expressed in degrees).

# Class vortex.Vortex

This class performs the required initialization of the library, and reports any errors that took place when compiling the standard shaders.

# Function Init:Bool()

Initializes the Vortex library. This should be called before any other function in the library.

# Function GetShaderError:String()

Reports any errors that took place while compiling the shaders on initialization.

# Class vortex.core.Bone

This class is used to represent a bone within an animated mesh. Bones can contain a list of transformations to be applied to the geometry attached to this bone when using animations. You don't normally need to deal with this class directly.

# Function Create:Bone(name:String)

Creates a new bone with the specified name.

# Method GetName:String()

Returns the name of the bone

# Method SetDefaultTransform:Void(px#, py#, pz#, rw#, rx#, ry#, rz#, sx#, sy#, sz#)

Sets the position, rotation (as a quaternion) and scale, relative to its parent, to be applied to this bone when it is not being rendered animated. You don't need to use this method, unless you are generating meshes by hand. When loading a mesh from disk, this method will be called automatically by the loader.

# Method GetDefaultTransform:Float[]()

Returns a 16 float array that contains the default transform matrix. You don't normally need to call this method. It is used internally when rendering the geometry attached to the bone.

# Method GetCurrentTransform:Float[]()

Returns a 16 float array that contains the transform matrix that will be used when rendering the geometry attached to this bone using a specific animation frame. You don't normally need to call this method. It is used internally when rendering the geometry attached to the bone.

# Method CalcCurrentTransform:Void(frame:Float, firstSeqFrame:Int, lastSeqFrame:Int)

Calculates the current transformation matrix needed to render the geometry attached to this bone in the specified animation frame. It also needs the indices of the first and last frame in the animation sequence that the frame belongs to. You don't normally need to call this method. It is used internally when rendering the geometry attached to the bone.

# Method AddSurface:Void(surf:Surface)

Adds a new surface to this bone. Surfaces attached to a bone contain geometry that is rendered with the transformation defined by the bone. You don't need to use this method, unless you are generating meshes by hand. When loading a mesh from disk, this method will be called automatically by the loader.

# Method GetNumSurfaces:Int()

Returns the number of surfaces attached to this bone.

# Method GetSurface:Surface(index:Int)

Returns the specified surface attached to this bone. The value of index goes in the range 0 .. GetNumSurfaces() - 1.

# Method AddChild:Void(bone:Bone)

Adds a new child bone to this bone.

# Method GetNumChildren:Int()

Returns the number of children bones attached to this bone.

# Method GetChild:Bone(index%)

Returns the specified child bone attached to this bone. The value of index goes in the range 0 .. GetNumChildren() - 1.

# Method Find:Bone(name$)

If the bone or any child 