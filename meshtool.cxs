'NOTE: To build on Win32 GCC, you need to go to the Makefile (i.e. glfw3/gcc_winnt/Makefile)
'and add -lole32 to the LDLIBS property

Strict

'Config settings
#GLFW_WINDOW_TITLE="Vortex2 Mesh Tool"
#GLFW_WINDOW_WIDTH=800
#GLFW_WINDOW_HEIGHT=600
#GLFW_WINDOW_RESIZABLE=True
#GLFW_WINDOW_SAMPLES=2
'#GLFW_GCC_MSIZE_LINUX="32"
#If HOST = "winnt"
#BINARY_FILES += "*.exe"
#End

'Imports
Import mojo.app
Import mojo.input
Import src_tools.dialog
Import src_tools.meshtool_gui
Import vortex
Import vortex.src.math3d

Class MeshToolApp Extends App Final
Public
	Method OnCreate:Int()
		'Setup
		SetUpdateRate(30)
		SetSwapInterval(1)
		Seed = Millisecs()
	
		'Init vortex
		If Not World.Init()
			Notify "Error", Stats.ShaderError(), True
			EndApp()
		End
		Print "Vendor name: " + Stats.VendorName()
		Print "Renderer name: " + Stats.RendererName()
		Print "API version name: " + Stats.APIVersionName()
		Print "Shading version name: " + Stats.ShadingVersionName()
		Print "Shader compilation: " + Stats.ShaderError()
		
		'Create gui
		mGui = New Gui
		
		'Create camera
		mCam = New Camera()
		mCam.SetPosition(2, 2, -2)
		mCam.SetRotation(37, -45, 0)
		mCam.ClearColor = Color.RGB(100, 100, 100)
		mCam.Far = 5000
		
		'Add directional light
		mLight = New Light(Light.TYPE_DIRECTIONAL)
		
		mLastMouseX = MouseX()
		mLastMouseY = MouseY()
		mFreeLook = False
		mTempVec = Vec3.Create()
		
		Return False
	End
	
	Method OnUpdate:Int()
		'Update world
		World.Update()
		
		'Update GUI
		Local newModel:Model = mGui.Update(mModel)
		If newModel <> Null
			If mModel Then mModel.Discard()
			mModel = newModel
			mModel.FPS = 16
		End
		
		'Update camera view
		mCam.ViewportWidth = DeviceWidth()
		mCam.ViewportHeight = DeviceHeight()
		mCam.AspectRatio = Float(DeviceWidth()) / DeviceHeight()
		
		'Update camera controls
		If MouseHit(MOUSE_RIGHT)
			mFreeLook = Not mFreeLook
			'If mFreeLook Then HideMouse() Else ShowMouse()
		End
		If mFreeLook
			mCam.Pitch += (MouseY() - mLastMouseY) * 90 * Stats.DeltaTime()
			mCam.Yaw += (MouseX() - mLastMouseX) * 90 * Stats.DeltaTime()
			If mCam.Pitch > 89 Then mCam.Pitch = 89
			If mCam.Pitch < -89 Then mCam.Pitch = -89
			If KeyDown(KEY_W) Then mCam.Move(0, 0, 32 * Stats.DeltaTime())
			If KeyDown(KEY_S) Then mCam.Move(0, 0, -32 * Stats.DeltaTime())
			If KeyDown(KEY_A) Then mCam.Move(-32 * Stats.DeltaTime(), 0, 0)
			If KeyDown(KEY_D) Then mCam.Move(32 * Stats.DeltaTime(), 0, 0)
		End
		
		'Update light rotation
		mTempVec.Set(-mCam.WorldX, -mCam.WorldY, -mCam.WorldZ)
		mTempVec.Normalize()
		mLight.Pitch = mTempVec.Pitch
		mLight.Yaw = mTempVec.Yaw
		
		'Update mouse
		mLastMouseX = MouseX()
		mLastMouseY = MouseY()
		
		Return False
	End
	
	Method OnRender:Int()
		'Render world
		World.Render()
		
		'Render GUI
		mGui.Render(mModel)
	
		Return False
	End
Private
	Field mCam			: Camera
	Field mLight		: Light
	Field mModel		: Model
	Field mGui			: Gui
	Field mLastMouseX	: Float
	Field mLastMouseY	: Float
	Field mFreeLook		: Bool
	Field mTempVec		: Vec3
End

Function Main:Int()
	New MeshToolApp()
	Return False
End
